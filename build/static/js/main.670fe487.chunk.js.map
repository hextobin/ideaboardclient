{"version":3,"sources":["components/Idea.js","components/IdeaForm.js","components/IdeasContainer.js","App.js","serviceWorker.js","index.js"],"names":["Idea","handleClick","_this","props","onClick","idea","id","handleDelete","onDelete","react_default","a","createElement","Card","className","Content","this","Header","title","Description","body","Component","IdeaForm","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleInput","e","resetNotification","setState","defineProperty","target","name","value","handleSubmit","state","axios","put","concat","then","response","console","log","updateIdea","data","catch","error","handleClickOutside","evt","resetId","type","placeholder","onChange","ref","titleRef","onClickOutside","IdeasContainer","addNewIdea","post","ideas","update","$splice","editingIdeaId","ideaIndex","findIndex","x","$set","notification","resetEditingIdeadId","enableEditing","focus","deleteIdea","delete","_this2","_this3","Fragment","map","components_IdeaForm","key","input","components_Idea","App","components_IdeasContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2TA8CeA,6MAzCbC,YAAc,WACZC,EAAKC,MAAMC,QAAQF,EAAKC,MAAME,KAAKC,OAGrCC,aAAe,WACbL,EAAKC,MAAMK,SAASN,EAAKC,MAAME,KAAKC,6EAIpC,OAaEG,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,UAAU,aACdJ,EAAAC,EAAAC,cAACC,EAAA,EAAKE,QAAN,KACIL,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQE,UAAU,cAAcT,QAASW,KAAKR,cAA9C,WAIJE,EAAAC,EAAAC,cAACC,EAAA,EAAKI,OAAN,CAAaZ,QAASW,KAAKd,aACxBc,KAAKZ,MAAME,KAAKY,OAEnBR,EAAAC,EAAAC,cAACC,EAAA,EAAKM,YAAN,CAAkBd,QAASW,KAAKd,aAC7Bc,KAAKZ,MAAME,KAAKc,eAnCVC,uCCEbC,cACJ,SAAAA,EAAYlB,GAAO,IAAAD,EAAA,OAAAoB,OAAAC,EAAA,EAAAD,CAAAP,KAAAM,IACjBnB,EAAAoB,OAAAE,EAAA,EAAAF,CAAAP,KAAAO,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAAX,KAAMZ,KAORwB,YAAc,SAACC,GACb1B,EAAKC,MAAM0B,oBACX3B,EAAK4B,SAALR,OAAAS,EAAA,EAAAT,CAAA,GAAgBM,EAAEI,OAAOC,KAAOL,EAAEI,OAAOE,SAVxBhC,EAanBiC,aAAe,WACb,IAAM9B,EAAO,CACXY,MAAOf,EAAKkC,MAAMnB,MAClBE,KAAMjB,EAAKkC,MAAMjB,MAGnBkB,IAAMC,IAAN,wDAAAC,OAC0DrC,EAAKC,MAAME,KAAKC,IACxE,CACED,KAAMA,IAGTmC,KAAK,SAAAC,GACJC,QAAQC,IAAIF,GACZvC,EAAKC,MAAMyC,WAAWH,EAASI,QAEhCC,MAAM,SAAAC,GAAK,OAAIL,QAAQC,IAAII,MA7BX7C,EAgCnB8C,mBAAqB,SAAAC,GACnB/C,EAAKC,MAAM+C,WA/BXhD,EAAKkC,MAAQ,CACXnB,MAAOf,EAAKC,MAAME,KAAKY,MACvBE,KAAMjB,EAAKC,MAAME,KAAKc,MAJPjB,wEAsCjB,OAQEO,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,UAAU,aACdJ,EAAAC,EAAAC,cAACC,EAAA,EAAKE,QAAN,KACEL,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAACC,EAAA,EAAKI,OAAN,KACEP,EAAAC,EAAAC,cAAA,SAAOwC,KAAK,OAAOlB,KAAK,QAAQmB,YAAY,gBAAgBlB,MAAOnB,KAAKqB,MAAMnB,MAAOoC,SAAUtC,KAAKY,YAAa2B,IAAKvC,KAAKZ,MAAMoD,YAEnI9C,EAAAC,EAAAC,cAACC,EAAA,EAAKM,YAAN,KACET,EAAAC,EAAAC,cAAA,YAAUsB,KAAK,OAAOmB,YAAY,qBAAqBlB,MAAOnB,KAAKqB,MAAMjB,KAAMkC,SAAUtC,KAAKY,eAEhGlB,EAAAC,EAAAC,cAAA,UAAQwC,KAAK,SAAS/C,QAASW,KAAKoB,cAApC,kBAxDWf,aAkERoC,cAAenC,GCsCfoC,cArGb,SAAAA,EAAYtD,GAAO,IAAAD,EAAA,OAAAoB,OAAAC,EAAA,EAAAD,CAAAP,KAAA0C,IACjBvD,EAAAoB,OAAAE,EAAA,EAAAF,CAAAP,KAAAO,OAAAG,EAAA,EAAAH,CAAAmC,GAAA/B,KAAAX,KAAMZ,KAiBRuD,WAAa,WACXxD,EAAK2B,oBACLQ,IAAMsB,KACJ,uDACA,CAAEtD,KACA,CACEY,MAAO,GACPE,KAAM,MAIXqB,KAAK,SAAAC,GACJ,IAAMmB,EAAQC,IAAO3D,EAAKkC,MAAMwB,MAAO,CACrCE,QAAS,CAAC,CAAC,EAAG,EAAGrB,EAASI,SAE5B3C,EAAK4B,SAAS,CACZ8B,MAAOA,EACPG,cAAetB,EAASI,KAAKvC,OAGhCwC,MAAM,SAAAC,GAAK,OAAIL,QAAQC,IAAII,MAtCX7C,EAyCnB0C,WAAa,SAACvC,GACZ,IAAM2D,EAAY9D,EAAKkC,MAAMwB,MAAMK,UAAU,SAAAC,GAAC,OAAGA,EAAE5D,KAAOD,EAAKC,KACzDsD,EAAQC,IAAO3D,EAAKkC,MAAMwB,MAAZtC,OAAAS,EAAA,EAAAT,CAAA,GACjB0C,EAAY,CAAEG,KAAM9D,KAEvBH,EAAK4B,SAAS,CACZ8B,MAAOA,EACPQ,aAAc,oBACdL,cAAe,QAjDA7D,EAqDnBmE,oBAAsB,WACpBnE,EAAK4B,SAAS,CAACiC,cAAe,QAtDb7D,EAyDnB2B,kBAAoB,WAClB3B,EAAK4B,SAAS,CAACsC,aAAc,MA1DZlE,EA6DnBoE,cAAgB,SAAChE,GACfJ,EAAK4B,SAAS,CAACiC,cAAezD,GAC5B,WAAOJ,EAAKe,MAAMsD,WA/DHrE,EAmEnBsE,WAAa,SAAClE,GACZ+B,IAAMoC,OAAN,wDAAAlC,OAAqEjC,IACpEkC,KAAK,SAAAC,GACJ,IAAMuB,EAAY9D,EAAKkC,MAAMwB,MAAMK,UAAU,SAAAC,GAAC,OAAIA,EAAE5D,KAAOA,IACrDsD,EAAQC,IAAO3D,EAAKkC,MAAMwB,MAAO,CAAEE,QAAS,CAAC,CAACE,EAAW,MAC/D9D,EAAK4B,SAAS,CAAC8B,MAAOA,MAEvBd,MAAM,SAAAC,GAAK,OAAIL,QAAQC,IAAII,MAxE5B7C,EAAKkC,MAAQ,CACXwB,MAAO,GACPG,cAAe,KACfK,aAAc,IALClE,mFASC,IAAAwE,EAAA3D,KAClBsB,IAAM,6DACLG,KAAK,SAAAC,GACJC,QAAQC,IAAIF,GACZiC,EAAK5C,SAAS,CAAC8B,MAAOnB,EAASI,SAEhCC,MAAM,SAAAC,GAAK,OAAIL,QAAQC,IAAII,sCA+DrB,IAAA4B,EAAA5D,KACP,OACEN,EAAAC,EAAAC,cAAAF,EAAAC,EAAAkE,SAAA,KACEnE,EAAAC,EAAAC,cAAA,UAAQE,UAAU,gBAAgBT,QAASW,KAAK2C,YAAhD,YAGAjD,EAAAC,EAAAC,cAAA,QAAME,UAAU,gBACbE,KAAKqB,MAAMgC,cAEd3D,EAAAC,EAAAC,cAAA,WACGI,KAAKqB,MAAMwB,MAAMiB,IAAI,SAACxE,GACrB,OAAIsE,EAAKvC,MAAM2B,gBAAkB1D,EAAKC,GAC5BG,EAAAC,EAAAC,cAACmE,EAAD,CAAUzE,KAAMA,EAAM0E,IAAK1E,EAAKC,GAAIsC,WAAY+B,EAAK/B,WAAYf,kBAAmB8C,EAAK9C,kBAAmB0B,SAAU,SAAAyB,GAAK,OAAIL,EAAK1D,MAAQ+D,GAAO9B,QAASyB,EAAKN,sBAEjK5D,EAAAC,EAAAC,cAACsE,EAAD,CAAM7E,QAASuE,EAAKL,cAAgBjE,KAAMA,EAAM0E,IAAK1E,EAAKC,GAAIE,SAAUmE,EAAKH,wBA9FtEpD,aCYd8D,mLAXX,OACEzE,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,cACbJ,EAAAC,EAAAC,cAAA,6CAEFF,EAAAC,EAAAC,cAACwE,EAAD,cAPU/D,aCOEgE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjF,EAAAC,EAAAC,cAACgF,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxD,KAAK,SAAAyD,GACjCA,EAAaC","file":"static/js/main.670fe487.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Card } from 'semantic-ui-react'\n\nclass Idea extends Component {\n\n  handleClick = () => {\n    this.props.onClick(this.props.idea.id)\n  }\n\n  handleDelete = () => {\n    this.props.onDelete(this.props.idea.id)\n  }\n\n  render () {\n    return(\n      // <div className='tile'>\n      //   <span className=\"deleteButton\" onClick={this.handleDelete}>\n      //     x\n      //   </span>\n      //   <h4 onClick={this.handleClick}>\n      //     {this.props.idea.title}\n      //   </h4>\n      //   <p onClick={this.handleClick}>\n      //     {this.props.idea.body}\n      //   </p>\n      // </div>\n\n      <Card className='card-tile'>\n        <Card.Content>\n            <div>\n              <button className='card-delete' onClick={this.handleDelete}>\n                Delete\n              </button>\n            </div>\n          <Card.Header onClick={this.handleClick}>\n            {this.props.idea.title}\n          </Card.Header>\n          <Card.Description onClick={this.handleClick}>\n            {this.props.idea.body}\n          </Card.Description>\n        </Card.Content>\n      </Card>\n    )\n  }\n}\n\nexport default Idea","import React, { Component } from 'react'\nimport axios from 'axios'\nimport { Card } from 'semantic-ui-react'\nimport onClickOutside from \"react-onclickoutside\"\n\nclass IdeaForm extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      title: this.props.idea.title,\n      body: this.props.idea.body,\n    }\n  }\n\n  handleInput = (e) => {\n    this.props.resetNotification()\n    this.setState({[e.target.name]: e.target.value})\n  }\n\n  handleSubmit = () => {\n    const idea = {\n      title: this.state.title,\n      body: this.state.body,\n    }\n\n    axios.put(\n      `https://quiet-taiga-10596.herokuapp.com/api/v1/ideas/${this.props.idea.id}`,\n      {\n        idea: idea\n      }\n    )\n    .then(response => {\n      console.log(response)\n      this.props.updateIdea(response.data)\n    })\n    .catch(error => console.log(error))\n  }\n\n  handleClickOutside = evt => {\n    this.props.resetId()\n  };\n\n\n  render() {\n    return(\n      // <div className=\"tile\">\n      //   <form onBlur={this.handleBlur}>\n      //     <input type=\"text\" className=\"input\" name='title' placeholder='Enter a Title' value={this.state.title} onChange={this.handleInput} ref={this.props.titleRef} />\n      //     <textarea name=\"body\" className=\"input\" placeholder='Describe Your Idea' value={this.state.body} onChange={this.handleInput}></textarea>\n      //     {/* <button className='sub'>Submit</button> */}\n      //   </form>\n      // </div>\n      <Card className='card-tile'>\n        <Card.Content>\n          <form>\n            <Card.Header>\n              <input type=\"text\" name='title' placeholder='Enter a Title' value={this.state.title} onChange={this.handleInput} ref={this.props.titleRef} />\n            </Card.Header>\n            <Card.Description>\n              <textarea name=\"body\" placeholder='Describe Your Idea' value={this.state.body} onChange={this.handleInput}></textarea>\n            </Card.Description>\n            <button type='button' onClick={this.handleSubmit}>\n              Save\n            </button>\n          </form>\n        </Card.Content>\n      </Card>\n    )\n  }\n}\n\nexport default onClickOutside(IdeaForm)","import React, { Component } from 'react'\nimport axios from 'axios'\nimport Idea from './Idea'\nimport update from 'immutability-helper'\nimport IdeaForm from './IdeaForm'\n\nclass IdeasContainer extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      ideas: [],\n      editingIdeaId: null,\n      notification: '',\n    }\n  }\n\n  componentDidMount() {\n    axios('https://quiet-taiga-10596.herokuapp.com/api/v1/ideas.json')\n    .then(response => {\n      console.log(response)\n      this.setState({ideas: response.data})\n    })\n    .catch(error => console.log(error))\n  }\n\n  addNewIdea = () => {\n    this.resetNotification()\n    axios.post(\n      'https://quiet-taiga-10596.herokuapp.com/api/v1/ideas',\n      { idea:\n        {\n          title: '',\n          body: ''\n        }\n      }\n    )\n    .then(response => {\n      const ideas = update(this.state.ideas, {\n        $splice: [[0, 0, response.data]]\n      })\n      this.setState({\n        ideas: ideas,\n        editingIdeaId: response.data.id\n      })\n    })\n    .catch(error => console.log(error))\n  }\n\n  updateIdea = (idea) => {\n    const ideaIndex = this.state.ideas.findIndex(x =>x.id === idea.id)\n    const ideas = update(this.state.ideas, {\n      [ideaIndex]: { $set: idea }\n    })\n    this.setState({\n      ideas: ideas,\n      notification: 'All Changes Saved',\n      editingIdeaId: null,\n    })\n  }\n\n  resetEditingIdeadId = () => {\n    this.setState({editingIdeaId: null})\n  }\n\n  resetNotification = () => {\n    this.setState({notification: ''})\n  }\n\n  enableEditing = (id) => {\n    this.setState({editingIdeaId: id},\n      () => {this.title.focus() })\n    \n  }\n\n  deleteIdea = (id) => {\n    axios.delete(`https://quiet-taiga-10596.herokuapp.com/api/v1/ideas/${id}`)\n    .then(response => {\n      const ideaIndex = this.state.ideas.findIndex(x => x.id === id)\n      const ideas = update(this.state.ideas, { $splice: [[ideaIndex, 1]]})\n      this.setState({ideas: ideas})\n    })\n    .catch(error => console.log(error))\n  }\n\n\n  render() {\n    return (\n      <>\n        <button className='newIdeaButton' onClick={this.addNewIdea}>\n          New Idea\n        </button>\n        <span className='notification'>\n          {this.state.notification}\n        </span>\n        <div>\n          {this.state.ideas.map((idea) => {\n            if (this.state.editingIdeaId === idea.id) {\n              return (<IdeaForm idea={idea} key={idea.id} updateIdea={this.updateIdea} resetNotification={this.resetNotification} titleRef={input => this.title = input} resetId={this.resetEditingIdeadId}/>)\n            } else {\n              return (<Idea onClick={this.enableEditing}  idea={idea} key={idea.id} onDelete={this.deleteIdea} />)\n            }\n          })}\n        </div>\n      </>\n    )\n  }\n}\n\nexport default IdeasContainer","import React, { Component } from 'react'\nimport 'semantic-ui-css/semantic.min.css'\nimport './App.css'\nimport IdeasContainer from './components/IdeasContainer'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <h1>Drello-Put Your Ideas Together</h1>\n        </div>\n        <IdeasContainer />\n      </div>\n    );\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}